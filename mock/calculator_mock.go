// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCalculator is a mock of Calculator interface
type MockCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockCalculatorMockRecorder
}

// MockCalculatorMockRecorder is the mock recorder for MockCalculator
type MockCalculatorMockRecorder struct {
	mock *MockCalculator
}

// NewMockCalculator creates a new mock instance
func NewMockCalculator(ctrl *gomock.Controller) *MockCalculator {
	mock := &MockCalculator{ctrl: ctrl}
	mock.recorder = &MockCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCalculator) EXPECT() *MockCalculatorMockRecorder {
	return m.recorder
}

// AddCurrent mocks base method
func (m *MockCalculator) AddCurrent(a float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCurrent", a)
	ret0, _ := ret[0].(float64)
	return ret0
}

// AddCurrent indicates an expected call of AddCurrent
func (mr *MockCalculatorMockRecorder) AddCurrent(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCurrent", reflect.TypeOf((*MockCalculator)(nil).AddCurrent), a)
}

// SubtractCurrent mocks base method
func (m *MockCalculator) SubtractCurrent(a float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubtractCurrent", a)
	ret0, _ := ret[0].(float64)
	return ret0
}

// SubtractCurrent indicates an expected call of SubtractCurrent
func (mr *MockCalculatorMockRecorder) SubtractCurrent(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubtractCurrent", reflect.TypeOf((*MockCalculator)(nil).SubtractCurrent), a)
}

// MultiplyCurrent mocks base method
func (m *MockCalculator) MultiplyCurrent(a float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiplyCurrent", a)
	ret0, _ := ret[0].(float64)
	return ret0
}

// MultiplyCurrent indicates an expected call of MultiplyCurrent
func (mr *MockCalculatorMockRecorder) MultiplyCurrent(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiplyCurrent", reflect.TypeOf((*MockCalculator)(nil).MultiplyCurrent), a)
}

// DivideCurrent mocks base method
func (m *MockCalculator) DivideCurrent(a float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DivideCurrent", a)
	ret0, _ := ret[0].(float64)
	return ret0
}

// DivideCurrent indicates an expected call of DivideCurrent
func (mr *MockCalculatorMockRecorder) DivideCurrent(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DivideCurrent", reflect.TypeOf((*MockCalculator)(nil).DivideCurrent), a)
}

// NegCurrent mocks base method
func (m *MockCalculator) NegCurrent() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NegCurrent")
	ret0, _ := ret[0].(float64)
	return ret0
}

// NegCurrent indicates an expected call of NegCurrent
func (mr *MockCalculatorMockRecorder) NegCurrent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NegCurrent", reflect.TypeOf((*MockCalculator)(nil).NegCurrent))
}

// AbsCurrent mocks base method
func (m *MockCalculator) AbsCurrent() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbsCurrent")
	ret0, _ := ret[0].(float64)
	return ret0
}

// AbsCurrent indicates an expected call of AbsCurrent
func (mr *MockCalculatorMockRecorder) AbsCurrent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbsCurrent", reflect.TypeOf((*MockCalculator)(nil).AbsCurrent))
}

// RootCurrent mocks base method
func (m *MockCalculator) RootCurrent(a float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RootCurrent", a)
	ret0, _ := ret[0].(float64)
	return ret0
}

// RootCurrent indicates an expected call of RootCurrent
func (mr *MockCalculatorMockRecorder) RootCurrent(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RootCurrent", reflect.TypeOf((*MockCalculator)(nil).RootCurrent), a)
}

// PowCurrent mocks base method
func (m *MockCalculator) PowCurrent(a float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowCurrent", a)
	ret0, _ := ret[0].(float64)
	return ret0
}

// PowCurrent indicates an expected call of PowCurrent
func (mr *MockCalculatorMockRecorder) PowCurrent(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowCurrent", reflect.TypeOf((*MockCalculator)(nil).PowCurrent), a)
}

// Repeat mocks base method
func (m *MockCalculator) Repeat(a float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repeat", a)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Repeat indicates an expected call of Repeat
func (mr *MockCalculatorMockRecorder) Repeat(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repeat", reflect.TypeOf((*MockCalculator)(nil).Repeat), a)
}

// Cancel mocks base method
func (m *MockCalculator) Cancel() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockCalculatorMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockCalculator)(nil).Cancel))
}
