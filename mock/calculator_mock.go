// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	gomock "github.com/golang/mock/gomock"
	calculator "gitlab.com/atthoriq/calculator-project/calculator"
	reflect "reflect"
)

// MockCalculator is a mock of Calculator interface
type MockCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockCalculatorMockRecorder
}

// MockCalculatorMockRecorder is the mock recorder for MockCalculator
type MockCalculatorMockRecorder struct {
	mock *MockCalculator
}

// NewMockCalculator creates a new mock instance
func NewMockCalculator(ctrl *gomock.Controller) *MockCalculator {
	mock := &MockCalculator{ctrl: ctrl}
	mock.recorder = &MockCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCalculator) EXPECT() *MockCalculatorMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockCalculator) Add(a float64) *calculator.NewCalculator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", a)
	ret0, _ := ret[0].(*calculator.NewCalculator)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockCalculatorMockRecorder) Add(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCalculator)(nil).Add), a)
}

// Subtract mocks base method
func (m *MockCalculator) Subtract(a float64) *calculator.NewCalculator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subtract", a)
	ret0, _ := ret[0].(*calculator.NewCalculator)
	return ret0
}

// Subtract indicates an expected call of Subtract
func (mr *MockCalculatorMockRecorder) Subtract(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subtract", reflect.TypeOf((*MockCalculator)(nil).Subtract), a)
}

// Multiply mocks base method
func (m *MockCalculator) Multiply(a float64) *calculator.NewCalculator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Multiply", a)
	ret0, _ := ret[0].(*calculator.NewCalculator)
	return ret0
}

// Multiply indicates an expected call of Multiply
func (mr *MockCalculatorMockRecorder) Multiply(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Multiply", reflect.TypeOf((*MockCalculator)(nil).Multiply), a)
}

// Divide mocks base method
func (m *MockCalculator) Divide(a float64) *calculator.NewCalculator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Divide", a)
	ret0, _ := ret[0].(*calculator.NewCalculator)
	return ret0
}

// Divide indicates an expected call of Divide
func (mr *MockCalculatorMockRecorder) Divide(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Divide", reflect.TypeOf((*MockCalculator)(nil).Divide), a)
}

// Abs mocks base method
func (m *MockCalculator) Abs() *calculator.NewCalculator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abs")
	ret0, _ := ret[0].(*calculator.NewCalculator)
	return ret0
}

// Abs indicates an expected call of Abs
func (mr *MockCalculatorMockRecorder) Abs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abs", reflect.TypeOf((*MockCalculator)(nil).Abs))
}

// Root mocks base method
func (m *MockCalculator) Root(a int) *calculator.NewCalculator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Root", a)
	ret0, _ := ret[0].(*calculator.NewCalculator)
	return ret0
}

// Root indicates an expected call of Root
func (mr *MockCalculatorMockRecorder) Root(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockCalculator)(nil).Root), a)
}

// Pow mocks base method
func (m *MockCalculator) Pow(a float64) *calculator.NewCalculator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pow", a)
	ret0, _ := ret[0].(*calculator.NewCalculator)
	return ret0
}

// Pow indicates an expected call of Pow
func (mr *MockCalculatorMockRecorder) Pow(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pow", reflect.TypeOf((*MockCalculator)(nil).Pow), a)
}

// Repeat mocks base method
func (m *MockCalculator) Repeat(a int) *calculator.NewCalculator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repeat", a)
	ret0, _ := ret[0].(*calculator.NewCalculator)
	return ret0
}

// Repeat indicates an expected call of Repeat
func (mr *MockCalculatorMockRecorder) Repeat(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repeat", reflect.TypeOf((*MockCalculator)(nil).Repeat), a)
}

// Cancel mocks base method
func (m *MockCalculator) Cancel() *calculator.NewCalculator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel")
	ret0, _ := ret[0].(*calculator.NewCalculator)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockCalculatorMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockCalculator)(nil).Cancel))
}

// GetResult mocks base method
func (m *MockCalculator) GetResult() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResult")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetResult indicates an expected call of GetResult
func (mr *MockCalculatorMockRecorder) GetResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResult", reflect.TypeOf((*MockCalculator)(nil).GetResult))
}
